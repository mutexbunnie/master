  //  QSqlQuery joinQuery("select distinctrow FirstName as UID1,ip as UID2 from Persons join log on Persons.FirstName=log.user",dbConnection);
    //traceroute//
    //traceroute www.google.com | awk {'print $2","$3'} |tr -d "()" >/tmp/trace
    //truncate traceroute; load data local infile '/tmp/trace' into table traceroute fields terminated by ',' enclosed by '"' (hostname,ip) ;

   // QSqlQuery joinQuery("select traceroute1.ip as 'UID1',traceroute2.ip as 'UID2' from traceroute as traceroute1 join traceroute as traceroute2 on traceroute1.id+1=traceroute2.id",dbConnection);
 //QSqlQuery joinQuery("select traceroute1.ip as 'UID1',traceroute2.ip as 'UID2' from traceroute as traceroute1 join traceroute as traceroute2 on traceroute1.id+1=traceroute2.id",dbConnection);
 //QSqlQuery joinQuery("select distinctrow ip4 as UID1 ,port as UID2 from hosts  join ports on hosts.hid=ports.hid; ",dbConnection);

 // QSqlQuery joinQuery("select distinctrow host  as UID1 ,  user as UID2 from users",dbConnection);
//   QSqlQuery joinQuery("select host1 as UID1,host2 as UID2 from combined /* where amount>36.5*/ ",dbConnection);
//
/*    qDebug()  << "Loading";



    while (joinQuery.next())
    {

       QString uid1 = joinQuery.value(0).toString();
       QString uid2 = joinQuery.value(1).toString();
//       qDebug()<<uid1<<uid2;

       scene->createEdge("host",uid1,"host",uid2);
       scene->createEdge("host",uid2,"host",uid1);
    }


    QSqlQuery joinQuery2("select distinctrow concat(host,'.mtn.co.za')  as UID1 ,  app as UID2 from app;",dbConnection);

    qDebug()  << "Loading";



    while (joinQuery2.next())
    {

       QString uid1 = joinQuery2.value(0).toString();
       QString uid2 = joinQuery2.value(1).toString();
//       qDebug()<<uid1<<uid2;

       scene->createEdge("host",uid1,"app",uid2);
       scene->createEdge("app",uid2,"host",uid1);
    }*/


    QSqlQuery joinQuery3("select distinctrow app as UID1,user as UID2 from users join app on users.host=concat(app.host,'.mtn.co.za') where app like '%';",dbConnection);

    qDebug()  << "Loading";

